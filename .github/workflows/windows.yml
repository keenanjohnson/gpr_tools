name: Windows Build

on:
  push:
    paths:
      - 'source/**'
      - 'CMakeLists.txt'
      - '.github/workflows/windows.yml'
  pull_request:
    paths:
      - 'source/**'
      - 'CMakeLists.txt'
      - '.github/workflows/windows.yml'

jobs:
  windows-build:
    runs-on: windows-latest
    
    strategy:
      matrix:
        build_type: [Debug, Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake
      working-directory: build
      run: cmake ..

    - name: Build project
      working-directory: build
      run: cmake --build . --config ${{ matrix.build_type }} --parallel

    - name: Test executables exist
      working-directory: build
      run: |
        $config = "${{ matrix.build_type }}"
        if (!(Test-Path "source\app\gpr_tools\$config\gpr_tools.exe")) {
          throw "gpr_tools.exe not found in $config"
        }
        if (!(Test-Path "source\app\vc5_decoder_app\$config\vc5_decoder_app.exe")) {
          throw "vc5_decoder_app.exe not found in $config"
        }
        if (!(Test-Path "source\app\vc5_encoder_app\$config\vc5_encoder_app.exe")) {
          throw "vc5_encoder_app.exe not found in $config"
        }
        echo "All executables built successfully for $config"

    - name: Quick functionality test
      if: matrix.build_type == 'Release'
      working-directory: build
      run: |
        # Quick test to ensure the main tool runs
        .\source\app\gpr_tools\Release\gpr_tools.exe --help
        echo "Basic functionality test passed"

    - name: Test sample conversion
      if: matrix.build_type == 'Release'
      working-directory: build
      run: |
        # Test with the Hero5 sample
        .\source\app\gpr_tools\Release\gpr_tools.exe -i "..\data\samples\Hero5\GOPR2657.GPR" -o quick_test.dng
        if (!(Test-Path "quick_test.dng")) {
          throw "Failed to create DNG output file"
        }
        $fileSize = (Get-Item "quick_test.dng").length
        if ($fileSize -lt 1MB) {
          throw "Output file size too small: $fileSize bytes"
        }
        echo "Sample conversion test passed - output file: $([math]::Round($fileSize/1MB, 2)) MB"
